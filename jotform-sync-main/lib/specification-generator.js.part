/**
 * Get enum ID by name
 * Uses caching to reduce database queries
 * 
 * @param {Object} client - Database client
 * @param {string} enumTable - Name of the enum table
 * @param {string} name - Enum value to lookup
 * @returns {Promise<number|null>} - Enum ID or null if not found
 */
async function getEnumIdByName(client, enumTable, name) {
  log('DEBUG', `Getting enum ID for ${enumTable}.${name}`);

  if (!name) {
    log('DEBUG', 'Name is null or empty, returning null');
    return null;
  }

  try {
    // Handle special case mappings
    if (enumTable === 'enum_experience_levels' && name === 'Expert') {
      log('INFO', 'Mapping "Expert" to "Advanced" in enum_experience_levels');
      name = 'Advanced';
    }

    // Check cache first
    const cachedId = enumCache.get(enumTable, name);
    if (cachedId !== undefined) {
      return cachedId;
    }

    // Not in cache, query database
    const query = `
      SELECT id FROM ${enumTable}
      WHERE LOWER(name) = LOWER($1)
    `;

    log('TRACE', `Executing query: ${query.replace(/\s+/g, ' ')} with param: ${name}`);
    const startTime = Date.now();
    const result = await client.query(query, [name]);
    log('TRACE', `Query completed in ${Date.now() - startTime}ms`);

    if (result.rows.length === 0) {
      log('WARN', `No matching enum value found for '${name}' in '${enumTable}'`);
      // Don't log to transform_log here as it might cause transaction issues
      // Instead throw a properly formatted error that can be caught higher up
      throw new Error(`Value "${name}" not found in ${enumTable}`);
    }

    const id = result.rows[0].id;
    log('DEBUG', `Found ID ${id} for '${name}' in '${enumTable}'`);

    // Cache the result
    enumCache.set(enumTable, name, id);

    return id;
  } catch (error) {
    log('ERROR', `Error in getEnumIdByName: ${error.message}`);
    throw error;
  }
}
